/**
 * Example Generator Plugin
 *
 * This is an example of how to create a custom generator plugin
 * for the Atomic EHR Codegen system.
 */

import { BaseGenerator } from "../src/lib/generators/base";
import type { Generator, GeneratorOptions } from "../src/lib/generators/base";
import type { GeneratorPlugin, GeneratorMetadata } from "../src/lib/generators/registry";

/**
 * Example generator options extending the base options
 */
interface ExampleGeneratorOptions extends GeneratorOptions {
	/** Custom option for the example generator */
	includeComments?: boolean;
	/** Custom prefix for generated files */
	filePrefix?: string;
}

/**
 * Example generator that creates simple documentation files
 */
class ExampleDocumentationGenerator extends BaseGenerator {
	readonly name = "example-docs";
	readonly target = "documentation";

	protected declare options: ExampleGeneratorOptions;

	constructor(options: ExampleGeneratorOptions) {
		super(options);
	}

	override async generate(): Promise<void> {
		// Generate a README file
		this.file("README.md");

		if (this.options.includeComments) {
			this.comment("Generated by Example Documentation Generator");
			this.blank();
		}

		this.line("# Generated Documentation");
		this.blank();
		this.line("This documentation was generated automatically from TypeSchema definitions.");
		this.blank();

		// Generate an index file
		const indexFileName = this.options.filePrefix ?
			`${this.options.filePrefix}-index.md` :
			"index.md";

		this.file(indexFileName);

		if (this.options.includeComments) {
			this.comment("Index file for generated documentation");
			this.blank();
		}

		this.line("# Documentation Index");
		this.blank();
		this.line("- [README](./README.md)");
		this.line("- [API Reference](./api.md)");
		this.blank();

		// Generate an API reference file
		this.file("api.md");

		if (this.options.includeComments) {
			this.comment("API reference documentation");
			this.blank();
		}

		this.line("# API Reference");
		this.blank();
		this.line("## Types");
		this.blank();
		this.line("Generated types will be documented here.");
		this.blank();

		// Write all files
		await this.writeFiles();
	}

	override async validate(): Promise<void> {
		await super.validate();

		// Custom validation logic
		if (this.options.filePrefix && this.options.filePrefix.includes('/')) {
			throw new Error("File prefix cannot contain path separators");
		}
	}
}

/**
 * Generator metadata
 */
export const metadata: GeneratorMetadata = {
	id: "example-docs",
	name: "Example Documentation Generator",
	target: "documentation",
	version: "1.0.0",
	description: "Example generator that creates simple documentation files from TypeSchema",
	author: "Atomic EHR Team",
	supportedInputs: [".json", ".ndjson"],
	supportedOutputs: [".md"],
	builtin: false,
	configSchema: {
		type: "object",
		properties: {
			includeComments: {
				type: "boolean",
				description: "Include comments in generated files",
				default: true,
			},
			filePrefix: {
				type: "string",
				description: "Prefix for generated file names",
				pattern: "^[a-zA-Z0-9_-]+$",
			},
		},
	},
};

/**
 * Generator factory function
 */
export function createGenerator(options: GeneratorOptions): Generator {
	return new ExampleDocumentationGenerator(options as ExampleGeneratorOptions);
}

/**
 * Plugin validation function (optional)
 */
export async function validate(): Promise<void> {
	// Plugin-level validation
	console.log("Example plugin validation passed");
}

/**
 * Plugin cleanup function (optional)
 */
export async function cleanup(): Promise<void> {
	// Plugin-level cleanup
	console.log("Example plugin cleanup completed");
}

/**
 * Plugin export (this is what the plugin loader looks for)
 */
export const plugin: GeneratorPlugin = {
	metadata,
	createGenerator,
	validate,
	cleanup,
};

/**
 * Default export (alternative plugin format)
 */
export default plugin;
