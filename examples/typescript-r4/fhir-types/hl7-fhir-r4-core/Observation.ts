// WARNING: This file is autogenerated by @atomic-ehr/codegen.
// GitHub: https://github.com/orgs/atomic-ehr/repositories
// Any manual changes made to this file may be overwritten.

import type { Annotation } from "../hl7-fhir-r4-core/Annotation";
import type { BackboneElement } from "../hl7-fhir-r4-core/BackboneElement";
import type { CodeableConcept } from "../hl7-fhir-r4-core/CodeableConcept";
import type { DomainResource } from "../hl7-fhir-r4-core/DomainResource";
import type { Identifier } from "../hl7-fhir-r4-core/Identifier";
import type { Period } from "../hl7-fhir-r4-core/Period";
import type { Quantity } from "../hl7-fhir-r4-core/Quantity";
import type { Range } from "../hl7-fhir-r4-core/Range";
import type { Ratio } from "../hl7-fhir-r4-core/Ratio";
import type { Reference } from "../hl7-fhir-r4-core/Reference";
import type { SampledData } from "../hl7-fhir-r4-core/SampledData";
import type { Timing } from "../hl7-fhir-r4-core/Timing";

export type { Annotation } from "../hl7-fhir-r4-core/Annotation";
export type { BackboneElement } from "../hl7-fhir-r4-core/BackboneElement";
export type { CodeableConcept } from "../hl7-fhir-r4-core/CodeableConcept";
export type { Identifier } from "../hl7-fhir-r4-core/Identifier";
export type { Period } from "../hl7-fhir-r4-core/Period";
export type { Quantity } from "../hl7-fhir-r4-core/Quantity";
export type { Range } from "../hl7-fhir-r4-core/Range";
export type { Ratio } from "../hl7-fhir-r4-core/Ratio";
export type { Reference } from "../hl7-fhir-r4-core/Reference";
export type { SampledData } from "../hl7-fhir-r4-core/SampledData";
export type { Timing } from "../hl7-fhir-r4-core/Timing";

export interface ObservationComponent extends BackboneElement {
    code: CodeableConcept;
    dataAbsentReason?: CodeableConcept;
    interpretation?: CodeableConcept[];
    valueBoolean?: boolean;
    valueCodeableConcept?: CodeableConcept;
    valueDateTime?: string;
    valueInteger?: number;
    valuePeriod?: Period;
    valueQuantity?: Quantity;
    valueRange?: Range;
    valueRatio?: Ratio;
    valueSampledData?: SampledData;
    valueString?: string;
    valueTime?: string;
}
export interface ObservationReferenceRange extends BackboneElement {
    age?: Range;
    appliesTo?: CodeableConcept[];
    high?: Quantity;
    low?: Quantity;
    text?: string;
    type_?: CodeableConcept;
}
export interface Observation extends DomainResource {
    resourceType: "Observation";

    basedOn?: Reference<"CarePlan" | "DeviceRequest" | "ImmunizationRecommendation" | "MedicationRequest" | "NutritionOrder" | "ServiceRequest">[];
    bodySite?: CodeableConcept;
    category?: CodeableConcept[];
    code: CodeableConcept;
    component?: ObservationComponent[];
    dataAbsentReason?: CodeableConcept;
    derivedFrom?: Reference<"DocumentReference" | "ImagingStudy" | "Media" | "MolecularSequence" | "Observation" | "QuestionnaireResponse">[];
    device?: Reference<"Device" | "DeviceMetric">;
    effectiveDateTime?: string;
    _effectiveDateTime?: Element;
    effectiveInstant?: string;
    _effectiveInstant?: Element;
    effectivePeriod?: Period;
    effectiveTiming?: Timing;
    encounter?: Reference<"Encounter">;
    focus?: Reference<"Resource">[];
    hasMember?: Reference<"MolecularSequence" | "Observation" | "QuestionnaireResponse">[];
    identifier?: Identifier[];
    interpretation?: CodeableConcept[];
    issued?: string;
    _issued?: Element;
    method?: CodeableConcept;
    note?: Annotation[];
    partOf?: Reference<"ImagingStudy" | "Immunization" | "MedicationAdministration" | "MedicationDispense" | "MedicationStatement" | "Procedure">[];
    performer?: Reference<"CareTeam" | "Organization" | "Patient" | "Practitioner" | "PractitionerRole" | "RelatedPerson">[];
    referenceRange?: ObservationReferenceRange[];
    specimen?: Reference<"Specimen">;
    status: "registered" | "preliminary" | "final" | "amended" | "corrected" | "cancelled" | "entered-in-error" | "unknown";
    _status?: Element;
    subject?: Reference<"Device" | "Group" | "Location" | "Patient">;
    valueBoolean?: boolean;
    _valueBoolean?: Element;
    valueCodeableConcept?: CodeableConcept;
    valueDateTime?: string;
    _valueDateTime?: Element;
    valueInteger?: number;
    _valueInteger?: Element;
    valuePeriod?: Period;
    valueQuantity?: Quantity;
    valueRange?: Range;
    valueRatio?: Ratio;
    valueSampledData?: SampledData;
    valueString?: string;
    _valueString?: Element;
    valueTime?: string;
    _valueTime?: Element;
}
