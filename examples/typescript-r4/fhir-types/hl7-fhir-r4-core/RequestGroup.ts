// WARNING: This file is autogenerated by @atomic-ehr/codegen.
// GitHub: https://github.com/orgs/atomic-ehr/repositories
// Any manual changes made to this file may be overwritten.

import type { Age } from "../hl7-fhir-r4-core/Age";
import type { Annotation } from "../hl7-fhir-r4-core/Annotation";
import type { BackboneElement } from "../hl7-fhir-r4-core/BackboneElement";
import type { CodeableConcept } from "../hl7-fhir-r4-core/CodeableConcept";
import type { DomainResource } from "../hl7-fhir-r4-core/DomainResource";
import type { Duration } from "../hl7-fhir-r4-core/Duration";
import type { Expression } from "../hl7-fhir-r4-core/Expression";
import type { Identifier } from "../hl7-fhir-r4-core/Identifier";
import type { Period } from "../hl7-fhir-r4-core/Period";
import type { Range } from "../hl7-fhir-r4-core/Range";
import type { Reference } from "../hl7-fhir-r4-core/Reference";
import type { RelatedArtifact } from "../hl7-fhir-r4-core/RelatedArtifact";
import type { Timing } from "../hl7-fhir-r4-core/Timing";

export type { Age } from "../hl7-fhir-r4-core/Age";
export type { Annotation } from "../hl7-fhir-r4-core/Annotation";
export type { BackboneElement } from "../hl7-fhir-r4-core/BackboneElement";
export type { CodeableConcept } from "../hl7-fhir-r4-core/CodeableConcept";
export type { Duration } from "../hl7-fhir-r4-core/Duration";
export type { Expression } from "../hl7-fhir-r4-core/Expression";
export type { Identifier } from "../hl7-fhir-r4-core/Identifier";
export type { Period } from "../hl7-fhir-r4-core/Period";
export type { Range } from "../hl7-fhir-r4-core/Range";
export type { Reference } from "../hl7-fhir-r4-core/Reference";
export type { RelatedArtifact } from "../hl7-fhir-r4-core/RelatedArtifact";
export type { Timing } from "../hl7-fhir-r4-core/Timing";

export interface RequestGroupAction extends BackboneElement {
    cardinalityBehavior?: "single" | "multiple";
    code?: CodeableConcept[];
    condition?: RequestGroupActionCondition[];
    description?: string;
    documentation?: RelatedArtifact[];
    groupingBehavior?: "visual-group" | "logical-group" | "sentence-group";
    participant?: Reference<"Device" | "Patient" | "Practitioner" | "PractitionerRole" | "RelatedPerson">[];
    precheckBehavior?: "yes" | "no";
    prefix?: string;
    priority?: "routine" | "urgent" | "asap" | "stat";
    relatedAction?: RequestGroupActionRelatedAction[];
    requiredBehavior?: "must" | "could" | "must-unless-documented";
    resource?: Reference<"Resource">;
    selectionBehavior?: "any" | "all" | "all-or-none" | "exactly-one" | "at-most-one" | "one-or-more";
    textEquivalent?: string;
    timingAge?: Age;
    timingDateTime?: string;
    timingDuration?: Duration;
    timingPeriod?: Period;
    timingRange?: Range;
    timingTiming?: Timing;
    title?: string;
    type_?: CodeableConcept;
}
export interface RequestGroupActionCondition extends BackboneElement {
    expression?: Expression;
    kind: "applicability" | "start" | "stop";
}
export interface RequestGroupActionRelatedAction extends BackboneElement {
    actionId: string;
    offsetDuration?: Duration;
    offsetRange?: Range;
    relationship: "before-start" | "before" | "before-end" | "concurrent-with-start" | "concurrent" | "concurrent-with-end" | "after-start" | "after" | "after-end";
}
export interface RequestGroup extends DomainResource {
    resourceType: "RequestGroup";

    action?: RequestGroupAction[];
    author?: Reference<"Device" | "Practitioner" | "PractitionerRole">;
    authoredOn?: string;
    _authoredOn?: Element;
    basedOn?: Reference<"Resource">[];
    code?: CodeableConcept;
    encounter?: Reference<"Encounter">;
    groupIdentifier?: Identifier;
    identifier?: Identifier[];
    instantiatesCanonical?: string[];
    _instantiatesCanonical?: Element;
    instantiatesUri?: string[];
    _instantiatesUri?: Element;
    intent: "proposal" | "plan" | "directive" | "order" | "original-order" | "reflex-order" | "filler-order" | "instance-order" | "option";
    _intent?: Element;
    note?: Annotation[];
    priority?: "routine" | "urgent" | "asap" | "stat";
    _priority?: Element;
    reasonCode?: CodeableConcept[];
    reasonReference?: Reference<"Condition" | "DiagnosticReport" | "DocumentReference" | "Observation">[];
    replaces?: Reference<"Resource">[];
    status: "draft" | "active" | "on-hold" | "revoked" | "completed" | "entered-in-error" | "unknown";
    _status?: Element;
    subject?: Reference<"Group" | "Patient">;
}
