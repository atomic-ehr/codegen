// WARNING: This file is autogenerated by @atomic-ehr/codegen.
// GitHub: https://github.com/orgs/atomic-ehr/repositories
// Any manual changes made to this file may be overwritten.

import type { BackboneElement } from "../hl7-fhir-r4-core/BackboneElement";
import type { CodeableConcept } from "../hl7-fhir-r4-core/CodeableConcept";
import type { Observation } from "../hl7-fhir-r4-core/Observation";
import type { ObservationComponent } from "../hl7-fhir-r4-core/Observation";
import type { Period } from "../hl7-fhir-r4-core/Period";
import type { Quantity } from "../hl7-fhir-r4-core/Quantity";
import type { Reference } from "../hl7-fhir-r4-core/Reference";

export interface observation_resprate {
    __profileUrl: "http://hl7.org/fhir/StructureDefinition/resprate";

    status: 'registered' | 'preliminary' | 'final' | 'amended' | 'corrected' | 'cancelled' | 'entered-in-error' | 'unknown';
    category: CodeableConcept[];
    code: CodeableConcept;
    subject: Reference<'Patient'>;
    effectiveDateTime?: string;
    effectivePeriod?: Period;
    dataAbsentReason?: CodeableConcept;
    hasMember?: Reference<'MolecularSequence' | 'QuestionnaireResponse' | "Observation" /*observation-vitalsigns*/>[];
    derivedFrom?: Reference<'DocumentReference' | 'ImagingStudy' | 'Media' | 'MolecularSequence' | 'QuestionnaireResponse' | "Observation" /*observation-vitalsigns*/>[];
    component?: ObservationComponent[];
    valueQuantity?: Quantity;
}

export const attach_observation_resprate = (resource: Observation, profile: observation_resprate): Observation => {
    return {
        ...resource,
        meta: {
            profile: ['http://hl7.org/fhir/StructureDefinition/resprate']
        },
        status: profile.status,
        category: profile.category,
        code: profile.code,
        subject: profile.subject,
        effectiveDateTime: profile.effectiveDateTime,
        effectivePeriod: profile.effectivePeriod,
        dataAbsentReason: profile.dataAbsentReason,
        hasMember: profile.hasMember,
        derivedFrom: profile.derivedFrom,
        component: profile.component,
        valueQuantity: profile.valueQuantity,
    }
}

export const extract_Observation = (resource: Observation): observation_resprate => {
    if (resource.category === undefined) {
        throw new Error("'category' is required for http://hl7.org/fhir/StructureDefinition/resprate");
    }
    if (resource.subject === undefined) {
        throw new Error("'subject' is required for http://hl7.org/fhir/StructureDefinition/resprate");
    }
    const reference_pred_subject = (ref?: Reference) => {
        return !ref
            || ref.reference?.startsWith('Device/')
            || ref.reference?.startsWith('Group/')
            || ref.reference?.startsWith('Location/')
            || ref.reference?.startsWith('Patient/')
            ;
    }
    if ( reference_pred_subject(resource.subject) ) {
        throw new Error("'subject' has different references in profile and specialization");
    }

    return {
        __profileUrl: 'http://hl7.org/fhir/StructureDefinition/resprate',
        status: resource.status,
        category: resource.category,
        code: resource.code,
        subject: resource.subject as observation_resprate['subject'],
        effectiveDateTime: resource.effectiveDateTime,
        effectivePeriod: resource.effectivePeriod,
        dataAbsentReason: resource.dataAbsentReason,
        hasMember: resource.hasMember,
        derivedFrom: resource.derivedFrom,
        component: resource.component,
        valueQuantity: resource.valueQuantity,
    }
}
