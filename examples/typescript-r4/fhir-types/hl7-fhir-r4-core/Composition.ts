// WARNING: This file is autogenerated by @atomic-ehr/codegen.
// GitHub: https://github.com/orgs/atomic-ehr/repositories
// Any manual changes made to this file may be overwritten.

import type { BackboneElement } from "../hl7-fhir-r4-core/BackboneElement";
import type { CodeableConcept } from "../hl7-fhir-r4-core/CodeableConcept";
import type { DomainResource } from "../hl7-fhir-r4-core/DomainResource";
import type { Identifier } from "../hl7-fhir-r4-core/Identifier";
import type { Narrative } from "../hl7-fhir-r4-core/Narrative";
import type { Period } from "../hl7-fhir-r4-core/Period";
import type { Reference } from "../hl7-fhir-r4-core/Reference";

export type { BackboneElement } from "../hl7-fhir-r4-core/BackboneElement";
export type { CodeableConcept } from "../hl7-fhir-r4-core/CodeableConcept";
export type { Identifier } from "../hl7-fhir-r4-core/Identifier";
export type { Narrative } from "../hl7-fhir-r4-core/Narrative";
export type { Period } from "../hl7-fhir-r4-core/Period";
export type { Reference } from "../hl7-fhir-r4-core/Reference";

export interface CompositionAttester extends BackboneElement {
    mode: "personal" | "professional" | "legal" | "official";
    party?: Reference<"Organization" | "Patient" | "Practitioner" | "PractitionerRole" | "RelatedPerson">;
    time?: string;
}
export interface CompositionEvent extends BackboneElement {
    code?: CodeableConcept[];
    detail?: Reference<"Resource">[];
    period?: Period;
}
export interface CompositionRelatesTo extends BackboneElement {
    code: "replaces" | "transforms" | "signs" | "appends";
    targetIdentifier?: Identifier;
    targetReference?: Reference<"Composition">;
}
export interface CompositionSection extends BackboneElement {
    author?: Reference<"Device" | "Organization" | "Patient" | "Practitioner" | "PractitionerRole" | "RelatedPerson">[];
    code?: CodeableConcept;
    emptyReason?: CodeableConcept;
    entry?: Reference<"Resource">[];
    focus?: Reference<"Resource">;
    mode?: "working" | "snapshot" | "changes";
    orderedBy?: CodeableConcept;
    text?: Narrative;
    title?: string;
}
export interface Composition extends DomainResource {
    resourceType: "Composition";

    attester?: CompositionAttester[];
    author: Reference<"Device" | "Organization" | "Patient" | "Practitioner" | "PractitionerRole" | "RelatedPerson">[];
    category?: CodeableConcept[];
    confidentiality?: "U" | "L" | "M" | "N" | "R" | "V";
    _confidentiality?: Element;
    custodian?: Reference<"Organization">;
    date: string;
    _date?: Element;
    encounter?: Reference<"Encounter">;
    event?: CompositionEvent[];
    identifier?: Identifier;
    relatesTo?: CompositionRelatesTo[];
    section?: CompositionSection[];
    status: "preliminary" | "final" | "amended" | "entered-in-error";
    _status?: Element;
    subject?: Reference<"Resource">;
    title: string;
    _title?: Element;
    type: CodeableConcept;
}
