// WARNING: This file is autogenerated by @atomic-ehr/codegen.
// GitHub: https://github.com/orgs/atomic-ehr/repositories
// Any manual changes made to this file may be overwritten.

import type { BackboneElement } from "../hl7-fhir-r4-core/BackboneElement";
import type { CodeableConcept } from "../hl7-fhir-r4-core/CodeableConcept";
import type { DomainResource } from "../hl7-fhir-r4-core/DomainResource";
import type { Identifier } from "../hl7-fhir-r4-core/Identifier";
import type { Quantity } from "../hl7-fhir-r4-core/Quantity";
import type { Reference } from "../hl7-fhir-r4-core/Reference";

export type { BackboneElement } from "../hl7-fhir-r4-core/BackboneElement";
export type { CodeableConcept } from "../hl7-fhir-r4-core/CodeableConcept";
export type { Identifier } from "../hl7-fhir-r4-core/Identifier";
export type { Quantity } from "../hl7-fhir-r4-core/Quantity";
export type { Reference } from "../hl7-fhir-r4-core/Reference";

export interface MolecularSequenceQuality extends BackboneElement {
    end?: number;
    fScore?: number;
    gtFP?: number;
    method?: CodeableConcept;
    precision?: number;
    queryFP?: number;
    queryTP?: number;
    recall?: number;
    roc?: MolecularSequenceQualityRoc;
    score?: Quantity;
    standardSequence?: CodeableConcept;
    start?: number;
    truthFN?: number;
    truthTP?: number;
    type: "indel" | "snp" | "unknown";
}
export interface MolecularSequenceQualityRoc extends BackboneElement {
    fMeasure?: number[];
    numFN?: number[];
    numFP?: number[];
    numTP?: number[];
    precision?: number[];
    score?: number[];
    sensitivity?: number[];
}
export interface MolecularSequenceReferenceSeq extends BackboneElement {
    chromosome?: CodeableConcept;
    genomeBuild?: string;
    orientation?: "sense" | "antisense";
    referenceSeqId?: CodeableConcept;
    referenceSeqPointer?: Reference<"MolecularSequence">;
    referenceSeqString?: string;
    strand?: "watson" | "crick";
    windowEnd?: number;
    windowStart?: number;
}
export interface MolecularSequenceRepository extends BackboneElement {
    datasetId?: string;
    name?: string;
    readsetId?: string;
    type: "directlink" | "openapi" | "login" | "oauth" | "other";
    url?: string;
    variantsetId?: string;
}
export interface MolecularSequenceStructureVariant extends BackboneElement {
    exact?: boolean;
    inner?: MolecularSequenceStructureVariantInner;
    length?: number;
    outer?: MolecularSequenceStructureVariantOuter;
    variantType?: CodeableConcept;
}
export interface MolecularSequenceStructureVariantInner extends BackboneElement {
    end?: number;
    start?: number;
}
export interface MolecularSequenceStructureVariantOuter extends BackboneElement {
    end?: number;
    start?: number;
}
export interface MolecularSequenceVariant extends BackboneElement {
    cigar?: string;
    end?: number;
    observedAllele?: string;
    referenceAllele?: string;
    start?: number;
    variantPointer?: Reference<"Observation">;
}
export interface MolecularSequence extends DomainResource {
    resourceType: "MolecularSequence";

    coordinateSystem: number;
    _coordinateSystem?: Element;
    device?: Reference<"Device">;
    identifier?: Identifier[];
    observedSeq?: string;
    _observedSeq?: Element;
    patient?: Reference<"Patient">;
    performer?: Reference<"Organization">;
    pointer?: Reference<"MolecularSequence">[];
    quality?: MolecularSequenceQuality[];
    quantity?: Quantity;
    readCoverage?: number;
    _readCoverage?: Element;
    referenceSeq?: MolecularSequenceReferenceSeq;
    repository?: MolecularSequenceRepository[];
    specimen?: Reference<"Specimen">;
    structureVariant?: MolecularSequenceStructureVariant[];
    type?: "aa" | "dna" | "rna";
    _type?: Element;
    variant?: MolecularSequenceVariant[];
}
