// WARNING: This file is autogenerated by @atomic-ehr/codegen.
// GitHub: https://github.com/orgs/atomic-ehr/repositories
// Any manual changes made to this file may be overwritten.

import type { Annotation } from "../hl7-fhir-r4-core/Annotation";
import type { Attachment } from "../hl7-fhir-r4-core/Attachment";
import type { BackboneElement } from "../hl7-fhir-r4-core/BackboneElement";
import type { CodeableConcept } from "../hl7-fhir-r4-core/CodeableConcept";
import type { Coding } from "../hl7-fhir-r4-core/Coding";
import type { DomainResource } from "../hl7-fhir-r4-core/DomainResource";
import type { Identifier } from "../hl7-fhir-r4-core/Identifier";
import type { Money } from "../hl7-fhir-r4-core/Money";
import type { Period } from "../hl7-fhir-r4-core/Period";
import type { Quantity } from "../hl7-fhir-r4-core/Quantity";
import type { Reference } from "../hl7-fhir-r4-core/Reference";
import type { Signature } from "../hl7-fhir-r4-core/Signature";
import type { Timing } from "../hl7-fhir-r4-core/Timing";

export type { Annotation } from "../hl7-fhir-r4-core/Annotation";
export type { Attachment } from "../hl7-fhir-r4-core/Attachment";
export type { BackboneElement } from "../hl7-fhir-r4-core/BackboneElement";
export type { CodeableConcept } from "../hl7-fhir-r4-core/CodeableConcept";
export type { Coding } from "../hl7-fhir-r4-core/Coding";
export type { Identifier } from "../hl7-fhir-r4-core/Identifier";
export type { Money } from "../hl7-fhir-r4-core/Money";
export type { Period } from "../hl7-fhir-r4-core/Period";
export type { Quantity } from "../hl7-fhir-r4-core/Quantity";
export type { Reference } from "../hl7-fhir-r4-core/Reference";
export type { Signature } from "../hl7-fhir-r4-core/Signature";
export type { Timing } from "../hl7-fhir-r4-core/Timing";

export interface ContractContentDefinition extends BackboneElement {
    copyright?: string;
    publicationDate?: string;
    publicationStatus: "amended" | "appended" | "cancelled" | "disputed" | "entered-in-error" | "executable" | "executed" | "negotiable" | "offered" | "policy" | "rejected" | "renewed" | "revoked" | "resolved" | "terminated";
    publisher?: Reference<"Organization" | "Practitioner" | "PractitionerRole">;
    subType?: CodeableConcept;
    type: CodeableConcept;
}
export interface ContractFriendly extends BackboneElement {
    contentAttachment?: Attachment;
    contentReference?: Reference<"Composition" | "DocumentReference" | "QuestionnaireResponse">;
}
export interface ContractLegal extends BackboneElement {
    contentAttachment?: Attachment;
    contentReference?: Reference<"Composition" | "DocumentReference" | "QuestionnaireResponse">;
}
export interface ContractRule extends BackboneElement {
    contentAttachment?: Attachment;
    contentReference?: Reference<"DocumentReference">;
}
export interface ContractSigner extends BackboneElement {
    party: Reference<"Organization" | "Patient" | "Practitioner" | "PractitionerRole" | "RelatedPerson">;
    signature: Signature[];
    type: Coding;
}
export interface ContractTerm extends BackboneElement {
    action?: ContractTermAction[];
    applies?: Period;
    asset?: ContractTermAsset[];
    identifier?: Identifier;
    issued?: string;
    offer: ContractTermOffer;
    securityLabel?: ContractTermSecurityLabel[];
    subType?: CodeableConcept;
    text?: string;
    topicCodeableConcept?: CodeableConcept;
    topicReference?: Reference<"Resource">;
    type?: CodeableConcept;
}
export interface ContractTermAction extends BackboneElement {
    context?: Reference<"Encounter" | "EpisodeOfCare">;
    contextLinkId?: string[];
    doNotPerform?: boolean;
    intent: CodeableConcept;
    linkId?: string[];
    note?: Annotation[];
    occurrenceDateTime?: string;
    occurrencePeriod?: Period;
    occurrenceTiming?: Timing;
    performer?: Reference<"CareTeam" | "Device" | "Location" | "Organization" | "Patient" | "Practitioner" | "PractitionerRole" | "RelatedPerson" | "Substance">;
    performerLinkId?: string[];
    performerRole?: CodeableConcept;
    performerType?: CodeableConcept[];
    reason?: string[];
    reasonCode?: CodeableConcept[];
    reasonLinkId?: string[];
    reasonReference?: Reference<"Condition" | "DiagnosticReport" | "DocumentReference" | "Observation" | "Questionnaire" | "QuestionnaireResponse">[];
    requester?: Reference<"Device" | "Group" | "Organization" | "Patient" | "Practitioner" | "PractitionerRole" | "RelatedPerson">[];
    requesterLinkId?: string[];
    securityLabelNumber?: number[];
    status: CodeableConcept;
    subject?: ContractTermActionSubject[];
    type: CodeableConcept;
}
export interface ContractTermActionSubject extends BackboneElement {
    reference: Reference<"Device" | "Group" | "Organization" | "Patient" | "Practitioner" | "PractitionerRole" | "RelatedPerson">[];
    role?: CodeableConcept;
}
export interface ContractTermAsset extends BackboneElement {
    condition?: string;
    context?: ContractTermAssetContext[];
    linkId?: string[];
    period?: Period[];
    periodType?: CodeableConcept[];
    relationship?: Coding;
    scope?: CodeableConcept;
    securityLabelNumber?: number[];
    subtype?: CodeableConcept[];
    text?: string;
    type?: CodeableConcept[];
    typeReference?: Reference<"Resource">[];
    usePeriod?: Period[];
    valuedItem?: ContractTermAssetValuedItem[];
}
export interface ContractTermAssetContext extends BackboneElement {
    code?: CodeableConcept[];
    reference?: Reference<"Resource">;
    text?: string;
}
export interface ContractTermAssetValuedItem extends BackboneElement {
    effectiveTime?: string;
    entityCodeableConcept?: CodeableConcept;
    entityReference?: Reference<"Resource">;
    factor?: number;
    identifier?: Identifier;
    linkId?: string[];
    net?: Money;
    payment?: string;
    paymentDate?: string;
    points?: number;
    quantity?: Quantity;
    recipient?: Reference<"Organization" | "Patient" | "Practitioner" | "PractitionerRole" | "RelatedPerson">;
    responsible?: Reference<"Organization" | "Patient" | "Practitioner" | "PractitionerRole" | "RelatedPerson">;
    securityLabelNumber?: number[];
    unitPrice?: Money;
}
export interface ContractTermOffer extends BackboneElement {
    answer?: ContractTermOfferAnswer[];
    decision?: CodeableConcept;
    decisionMode?: CodeableConcept[];
    identifier?: Identifier[];
    linkId?: string[];
    party?: ContractTermOfferParty[];
    securityLabelNumber?: number[];
    text?: string;
    topic?: Reference<"Resource">;
    type?: CodeableConcept;
}
export interface ContractTermOfferAnswer extends BackboneElement {
    valueAttachment?: Attachment;
    valueBoolean?: boolean;
    valueCoding?: Coding;
    valueDate?: string;
    valueDateTime?: string;
    valueDecimal?: number;
    valueInteger?: number;
    valueQuantity?: Quantity;
    valueReference?: Reference<"Resource">;
    valueString?: string;
    valueTime?: string;
    valueUri?: string;
}
export interface ContractTermOfferParty extends BackboneElement {
    reference: Reference<"Device" | "Group" | "Organization" | "Patient" | "Practitioner" | "PractitionerRole" | "RelatedPerson">[];
    role: CodeableConcept;
}
export interface ContractTermSecurityLabel extends BackboneElement {
    category?: Coding[];
    classification: Coding;
    control?: Coding[];
    number?: number[];
}
export interface Contract extends DomainResource {
    resourceType: "Contract";

    alias?: string[];
    _alias?: Element;
    applies?: Period;
    author?: Reference<"Organization" | "Patient" | "Practitioner" | "PractitionerRole">;
    authority?: Reference<"Organization">[];
    contentDefinition?: ContractContentDefinition;
    contentDerivative?: CodeableConcept;
    domain?: Reference<"Location">[];
    expirationType?: CodeableConcept;
    friendly?: ContractFriendly[];
    identifier?: Identifier[];
    instantiatesCanonical?: Reference<"Contract">;
    instantiatesUri?: string;
    _instantiatesUri?: Element;
    issued?: string;
    _issued?: Element;
    legal?: ContractLegal[];
    legallyBindingAttachment?: Attachment;
    legallyBindingReference?: Reference<"Composition" | "Contract" | "DocumentReference" | "QuestionnaireResponse">;
    legalState?: CodeableConcept;
    name?: string;
    _name?: Element;
    relevantHistory?: Reference<"Provenance">[];
    rule?: ContractRule[];
    scope?: CodeableConcept;
    signer?: ContractSigner[];
    site?: Reference<"Location">[];
    status?: "amended" | "appended" | "cancelled" | "disputed" | "entered-in-error" | "executable" | "executed" | "negotiable" | "offered" | "policy" | "rejected" | "renewed" | "revoked" | "resolved" | "terminated";
    _status?: Element;
    subject?: Reference<"Resource">[];
    subtitle?: string;
    _subtitle?: Element;
    subType?: CodeableConcept[];
    supportingInfo?: Reference<"Resource">[];
    term?: ContractTerm[];
    title?: string;
    _title?: Element;
    topicCodeableConcept?: CodeableConcept;
    topicReference?: Reference<"Resource">;
    type?: CodeableConcept;
    url?: string;
    _url?: Element;
    version?: string;
    _version?: Element;
}
