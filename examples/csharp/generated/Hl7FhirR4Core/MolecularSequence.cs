// WARNING: This file is autogenerated by @atomic-ehr/codegen.
// GitHub: https://github.com/orgs/atomic-ehr/repositories
// Any manual changes made to this file may be overwritten.


namespace SuperNameSpace.Hl7FhirR4Core;

public class MolecularSequence : DomainResource {
    public required int CoordinateSystem { get; set; }
    public ResourceReference? Device { get; set; }
    public Identifier[]? Identifier { get; set; }
    public string? ObservedSeq { get; set; }
    public ResourceReference? Patient { get; set; }
    public ResourceReference? Performer { get; set; }
    public ResourceReference[]? Pointer { get; set; }
    public MolecularSequenceQuality[]? Quality { get; set; }
    public Quantity? Quantity { get; set; }
    public int? ReadCoverage { get; set; }
    public MolecularSequenceReferenceSeq? ReferenceSeq { get; set; }
    public MolecularSequenceRepository[]? Repository { get; set; }
    public ResourceReference? Specimen { get; set; }
    public MolecularSequenceStructureVariant[]? StructureVariant { get; set; }
    public SequenceTypeEnum? Type { get; set; }
    public MolecularSequenceVariant[]? Variant { get; set; }

    public class MolecularSequenceQuality : BackboneElement {
        public int? End { get; set; }
        public decimal? FScore { get; set; }
        public decimal? GtFp { get; set; }
        public CodeableConcept? Method { get; set; }
        public decimal? Precision { get; set; }
        public decimal? QueryFp { get; set; }
        public decimal? QueryTp { get; set; }
        public decimal? Recall { get; set; }
        public MolecularSequenceQualityRoc? Roc { get; set; }
        public Quantity? Score { get; set; }
        public CodeableConcept? StandardSequence { get; set; }
        public int? Start { get; set; }
        public decimal? TruthFn { get; set; }
        public decimal? TruthTp { get; set; }
        public required QualityTypeEnum Type { get; set; }

        public override string ToString() => 
            JsonSerializer.Serialize(this, Config.JsonSerializerOptions);

    }

    public class MolecularSequenceQualityRoc : BackboneElement {
        public decimal[]? FMeasure { get; set; }
        public int[]? NumFn { get; set; }
        public int[]? NumFp { get; set; }
        public int[]? NumTp { get; set; }
        public decimal[]? Precision { get; set; }
        public int[]? Score { get; set; }
        public decimal[]? Sensitivity { get; set; }

        public override string ToString() => 
            JsonSerializer.Serialize(this, Config.JsonSerializerOptions);

    }

    public class MolecularSequenceReferenceSeq : BackboneElement {
        public CodeableConcept? Chromosome { get; set; }
        public string? GenomeBuild { get; set; }
        public OrientationTypeEnum? Orientation { get; set; }
        public CodeableConcept? ReferenceSeqId { get; set; }
        public ResourceReference? ReferenceSeqPointer { get; set; }
        public string? ReferenceSeqString { get; set; }
        public StrandTypeEnum? Strand { get; set; }
        public int? WindowEnd { get; set; }
        public int? WindowStart { get; set; }

        public override string ToString() => 
            JsonSerializer.Serialize(this, Config.JsonSerializerOptions);

    }

    public class MolecularSequenceRepository : BackboneElement {
        public string? DatasetId { get; set; }
        public string? Name { get; set; }
        public string? ReadsetId { get; set; }
        public required RepositoryTypeEnum Type { get; set; }
        public string? Url { get; set; }
        public string? VariantsetId { get; set; }

        public override string ToString() => 
            JsonSerializer.Serialize(this, Config.JsonSerializerOptions);

    }

    public class MolecularSequenceStructureVariant : BackboneElement {
        public bool? Exact { get; set; }
        public MolecularSequenceStructureVariantInner? Inner { get; set; }
        public int? Length { get; set; }
        public MolecularSequenceStructureVariantOuter? Outer { get; set; }
        public CodeableConcept? VariantType { get; set; }

        public override string ToString() => 
            JsonSerializer.Serialize(this, Config.JsonSerializerOptions);

    }

    public class MolecularSequenceStructureVariantInner : BackboneElement {
        public int? End { get; set; }
        public int? Start { get; set; }

        public override string ToString() => 
            JsonSerializer.Serialize(this, Config.JsonSerializerOptions);

    }

    public class MolecularSequenceStructureVariantOuter : BackboneElement {
        public int? End { get; set; }
        public int? Start { get; set; }

        public override string ToString() => 
            JsonSerializer.Serialize(this, Config.JsonSerializerOptions);

    }

    public class MolecularSequenceVariant : BackboneElement {
        public string? Cigar { get; set; }
        public int? End { get; set; }
        public string? ObservedAllele { get; set; }
        public string? ReferenceAllele { get; set; }
        public int? Start { get; set; }
        public ResourceReference? VariantPointer { get; set; }

        public override string ToString() => 
            JsonSerializer.Serialize(this, Config.JsonSerializerOptions);

    }


    public override string ToString() => 
        JsonSerializer.Serialize(this, Config.JsonSerializerOptions);

}

