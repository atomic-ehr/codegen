// WARNING: This file is autogenerated by @atomic-ehr/codegen.
// GitHub: https://github.com/orgs/atomic-ehr/repositories
// Any manual changes made to this file may be overwritten.


namespace SuperNameSpace.Hl7FhirR4Core;

public class Device : DomainResource {
    public ContactPoint[]? Contact { get; set; }
    public ResourceReference? Definition { get; set; }
    public DeviceDeviceName[]? DeviceName { get; set; }
    public string? DistinctIdentifier { get; set; }
    public string? ExpirationDate { get; set; }
    public Identifier[]? Identifier { get; set; }
    public ResourceReference? Location { get; set; }
    public string? LotNumber { get; set; }
    public string? ManufactureDate { get; set; }
    public string? Manufacturer { get; set; }
    public string? ModelNumber { get; set; }
    public Annotation[]? Note { get; set; }
    public ResourceReference? Owner { get; set; }
    public ResourceReference? Parent { get; set; }
    public string? PartNumber { get; set; }
    public ResourceReference? Patient { get; set; }
    public DeviceProperty[]? Property { get; set; }
    public CodeableConcept[]? Safety { get; set; }
    public string? SerialNumber { get; set; }
    public DeviceSpecialization[]? Specialization { get; set; }
    public FhirdeviceStatusEnum? Status { get; set; }
    public CodeableConcept[]? StatusReason { get; set; }
    public CodeableConcept? Type { get; set; }
    public DeviceUdiCarrier[]? UdiCarrier { get; set; }
    public string? Url { get; set; }
    public DeviceVersion[]? Version { get; set; }

    public class DeviceDeviceName : BackboneElement {
        public required string Name { get; set; }
        public required DeviceNameTypeEnum Type { get; set; }

        public override string ToString() => 
            JsonSerializer.Serialize(this, Helper.JsonSerializerOptions);

    }

    public class DeviceProperty : BackboneElement {
        public required CodeableConcept Type { get; set; }
        public CodeableConcept[]? ValueCode { get; set; }
        public Quantity[]? ValueQuantity { get; set; }

        public override string ToString() => 
            JsonSerializer.Serialize(this, Helper.JsonSerializerOptions);

    }

    public class DeviceSpecialization : BackboneElement {
        public required CodeableConcept SystemType { get; set; }
        public string? Version { get; set; }

        public override string ToString() => 
            JsonSerializer.Serialize(this, Helper.JsonSerializerOptions);

    }

    public class DeviceUdiCarrier : BackboneElement {
        public string? CarrierAidc { get; set; }
        public string? CarrierHrf { get; set; }
        public string? DeviceIdentifier { get; set; }
        public UdientryTypeEnum? EntryType { get; set; }
        public string? Issuer { get; set; }
        public string? Jurisdiction { get; set; }

        public override string ToString() => 
            JsonSerializer.Serialize(this, Helper.JsonSerializerOptions);

    }

    public class DeviceVersion : BackboneElement {
        public Identifier? Component { get; set; }
        public CodeableConcept? Type { get; set; }
        public required string Value { get; set; }

        public override string ToString() => 
            JsonSerializer.Serialize(this, Helper.JsonSerializerOptions);

    }


    public override string ToString() => 
        JsonSerializer.Serialize(this, Helper.JsonSerializerOptions);

}

