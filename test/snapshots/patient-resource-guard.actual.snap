/**
 * Check if value is a valid FHIR resource
 */
export function isResource(value: unknown): value is { resourceType: string } {
  return (
    value !== null &&
    typeof value === 'object' &&
    'resourceType' in value &&
    typeof (value as any).resourceType === 'string'
  );
}

/**
 * Type guard for specific resource type
 */
export function isResourceOfType<T extends { resourceType: string }>(
  value: unknown,
  resourceType: T['resourceType']
): value is T {
  return isResource(value) && (value as any).resourceType === resourceType;
}

/**
 * Bundle entry type guard
 */
export function isBundleEntry<T extends { resourceType: string }>(
  entry: unknown,
  resourceType?: T['resourceType']
): entry is { resource?: T } {
  if (!entry || typeof entry !== 'object') return false;
  const obj = entry as Record<string, unknown>;
  
  if (!('resource' in obj)) return true; // Entry without resource is valid
  
  const resource = obj.resource;
  if (resourceType) {
    return isResourceOfType(resource, resourceType);
  }
  return isResource(resource);
}

/**
 * Type guard for Patient resource
 * Performs basic structural validation
 */
export function isPatient(value: unknown): value is Patient {
  if (!value || typeof value !== 'object') return false;
  const obj = value as Record<string, unknown>;
  
  // Check resourceType
  if (obj.resourceType !== 'Patient') return false;
  
    // Array cardinality check for name
  if ("name" in obj && !Array.isArray(obj["name"])) return false;
  
  return true;
}

/**
 * Assertion function for Patient resource
 * Throws ValidationError if value is not a valid Patient
 */
export function assertPatient(
  value: unknown,
  message?: string
): asserts value is Patient {
  if (!isPatient(value)) {
    throw new ValidationError(
      message || `Value is not a valid Patient resource`,
      [],
      ValidationErrorCodes.INVALID_RESOURCE_TYPE,
      'error',
      'Patient',
      typeof value
    );
  }
}