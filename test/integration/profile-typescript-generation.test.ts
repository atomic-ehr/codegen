import { test, expect } from "bun:test";
import { TypeScriptGenerator } from "../../src/generators/typescript/generator";
import type { TypeSchema } from "../../src/lib/typeschema";

// Mock profile schema for testing
const mockUSCorePatientProfile: TypeSchema = {
	identifier: {
		kind: "profile",
		package: "hl7.fhir.us.core",
		version: "8.0.0",
		name: "USCorePatient",
		url: "http://hl7.org/fhir/us/core/StructureDefinition/us-core-patient"
	},
	base: {
		kind: "resource",
		package: "hl7.fhir.r4.core",
		version: "4.0.1",
		name: "Patient",
		url: "http://hl7.org/fhir/StructureDefinition/Patient"
	},
	description: "US Core Patient Profile",
	dependencies: [],
	metadata: {
		publisher: "HL7 US Realm Steering Committee",
		isUSCore: true,
		profileType: "us-core",
		date: "2023-10-01"
	},
	constraints: {
		"Patient.identifier": {
			min: 1,
			mustSupport: true,
			types: [{ code: "Identifier" }]
		},
		"Patient.name": {
			min: 1,
			mustSupport: true,
			types: [{ code: "HumanName" }]
		}
	},
	extensions: [
		{
			path: "Patient.extension:race",
			profile: ["http://hl7.org/fhir/us/core/StructureDefinition/us-core-race"],
			min: 0,
			max: "1",
			mustSupport: true
		}
	]
};

const mockGeneralProfile: TypeSchema = {
	identifier: {
		kind: "profile",
		package: "example.profiles",
		version: "1.0.0",
		name: "CustomPatient",
		url: "http://example.com/StructureDefinition/custom-patient"
	},
	base: {
		kind: "resource",
		package: "hl7.fhir.r4.core",
		version: "4.0.1",
		name: "Patient",
		url: "http://hl7.org/fhir/StructureDefinition/Patient"
	},
	description: "Custom Patient Profile",
	dependencies: [],
	metadata: {
		publisher: "Example Organization"
	},
	constraints: {
		"Patient.active": {
			min: 1,
			fixedValue: true
		}
	}
};

test("TypeScript generator handles profiles", async () => {
	console.log("[DEBUG_LOG] Starting TypeScript profile generation test");

	const generator = new TypeScriptGenerator({
		outputDir: "tmp/test-profiles",
		verbose: true
	});

	// Mock schemas with profiles
	generator.schemas = {
		resources: [],
		complexTypes: [],
		primitiveTypes: [],
		profiles: [mockUSCorePatientProfile, mockGeneralProfile],
		bindings: [],
		valueSets: []
	};

	try {
		await generator.generate();
		console.log("[DEBUG_LOG] Profile generation completed successfully");

		// Check that files were generated by reading from disk
		const outputDir = "tmp/test-profiles";

		// Check for profile files
		const usCoreFile = Bun.file(`${outputDir}/resources/profiles/uscore/USCorePatient.ts`);
		const customFile = Bun.file(`${outputDir}/resources/profiles/CustomPatient.ts`);
		const profilesIndexFile = Bun.file(`${outputDir}/resources/profiles/index.ts`);
		const usCoreIndexFile = Bun.file(`${outputDir}/resources/profiles/uscore/index.ts`);
		const mainIndexFile = Bun.file(`${outputDir}/index.ts`);
		const primitivesFile = Bun.file(`${outputDir}/types/primitives.ts`);

		expect(await usCoreFile.exists()).toBe(true);
		expect(await customFile.exists()).toBe(true);
		expect(await profilesIndexFile.exists()).toBe(true);
		expect(await usCoreIndexFile.exists()).toBe(true);

		// Check US Core profile content
		const usCoreContent = await usCoreFile.text();
		expect(usCoreContent).toContain("export interface USCorePatient extends Patient");
		expect(usCoreContent).toContain("US Core Patient Profile");
		expect(usCoreContent).toContain("@publisher HL7 US Realm Steering Committee");
		expect(usCoreContent).toContain("@profile US Core Profile");
		expect(usCoreContent).toContain("Must Support: true");

		// Check general profile content
		const customContent = await customFile.text();
		expect(customContent).toContain("export interface CustomPatient extends Patient");
		expect(customContent).toContain("Custom Patient Profile");

		// Check profiles index
		const profilesIndex = await profilesIndexFile.text();
		expect(profilesIndex).toContain("US Core Profiles");
		expect(profilesIndex).toContain("General Profiles");
		expect(profilesIndex).toContain("ProfileRegistry");
		expect(profilesIndex).toContain("ProfileMetadata");

		// Check US Core index
		const usCoreIndex = await usCoreIndexFile.text();
		expect(usCoreIndex).toContain("US Core Profile Exports");
		expect(usCoreIndex).toContain("USCoreProfileRegistry");
		expect(usCoreIndex).toContain("export type USCoreProfile");
		expect(usCoreIndex).toContain("isUSCoreProfile");

		// Check main index includes profiles
		const mainIndex = await mainIndexFile.text();
		expect(mainIndex).toContain("Individual profile exports");
		expect(mainIndex).toContain("export * as profiles");
		expect(mainIndex).toContain("export * as uscore");

		// Check primitive types include profile-aware references
		const primitives = await primitivesFile.text();
		expect(primitives).toContain("ProfileReference");
		expect(primitives).toContain("ResourceReference");
		expect(primitives).toContain("TypedProfileReference");

	} catch (error) {
		console.log("[DEBUG_LOG] Profile generation error:", error);
		throw error;
	}
});

test("Profile constraint field generation", async () => {
	console.log("[DEBUG_LOG] Testing profile constraint field generation");

	const generator = new TypeScriptGenerator({
		outputDir: "tmp/test-constraints",
		verbose: true
	});

	generator.schemas = {
		resources: [],
		complexTypes: [],
		primitiveTypes: [],
		profiles: [mockUSCorePatientProfile],
		bindings: [],
		valueSets: []
	};

	await generator.generate();

	// Read the generated profile file from disk
	const profileFile = Bun.file("tmp/test-constraints/resources/profiles/uscore/USCorePatient.ts");
	const profileContent = await profileFile.text();

	// Check constraint field generation
	expect(profileContent).toContain("identifier field with profile constraints");
	expect(profileContent).toContain("Minimum cardinality: 1");
	expect(profileContent).toContain("name field with profile constraints");
});

test("Profile extension field generation", async () => {
	console.log("[DEBUG_LOG] Testing profile extension field generation");

	const generator = new TypeScriptGenerator({
		outputDir: "tmp/test-extensions",
		verbose: true
	});

	generator.schemas = {
		resources: [],
		complexTypes: [],
		primitiveTypes: [],
		profiles: [mockUSCorePatientProfile],
		bindings: [],
		valueSets: []
	};

	await generator.generate();

	// Read the generated profile file from disk
	const profileFile = Bun.file("tmp/test-extensions/resources/profiles/uscore/USCorePatient.ts");
	const profileContent = await profileFile.text();

	// Check extension field generation
	expect(profileContent).toContain("Extension: http://hl7.org/fhir/us/core/StructureDefinition/us-core-race");
	expect(profileContent).toContain("complex.Extension | complex.Extension[]");
});

test("Profile registry generation", async () => {
	console.log("[DEBUG_LOG] Testing profile registry generation");

	const generator = new TypeScriptGenerator({
		outputDir: "tmp/test-registry",
		verbose: true
	});

	generator.schemas = {
		resources: [],
		complexTypes: [],
		primitiveTypes: [],
		profiles: [mockUSCorePatientProfile, mockGeneralProfile],
		bindings: [],
		valueSets: []
	};

	await generator.generate();

	// Read the generated files from disk
	const profilesIndexFile = Bun.file("tmp/test-registry/resources/profiles/index.ts");
	const usCoreIndexFile = Bun.file("tmp/test-registry/resources/profiles/uscore/index.ts");

	const profilesIndex = await profilesIndexFile.text();
	const usCoreIndex = await usCoreIndexFile.text();

	// Check profile registry
	expect(profilesIndex).toContain('ProfileRegistry = {');
	expect(profilesIndex).toContain('"http://hl7.org/fhir/us/core/StructureDefinition/us-core-patient": "USCorePatient"');
	expect(profilesIndex).toContain('"http://example.com/StructureDefinition/custom-patient": "CustomPatient"');

	// Check profile metadata
	expect(profilesIndex).toContain('ProfileMetadata = {');
	expect(profilesIndex).toContain('"USCorePatient": {');
	expect(profilesIndex).toContain('isUSCore: true');
	expect(profilesIndex).toContain('publisher: "HL7 US Realm Steering Committee"');

	// Check US Core registry
	expect(usCoreIndex).toContain('USCoreProfileRegistry = {');
	expect(usCoreIndex).toContain('"USCorePatient": "USCorePatient"');
	expect(usCoreIndex).toContain('getUSCoreProfileName');
});
