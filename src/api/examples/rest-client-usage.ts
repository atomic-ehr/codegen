/**
 * REST Client Usage Examples
 *
 * This file demonstrates how to use the generated REST API clients
 * for various FHIR operations and scenarios.
 */

// Note: These types would be generated by the TypeScript generator
interface Patient {
	resourceType: "Patient";
	id?: string;
	meta?: Meta;
	active?: boolean;
	name?: HumanName[];
	gender?: "male" | "female" | "other" | "unknown";
	birthDate?: string;
	telecom?: ContactPoint[];
	address?: Address[];
}

interface HumanName {
	use?:
		| "usual"
		| "official"
		| "temp"
		| "nickname"
		| "anonymous"
		| "old"
		| "maiden";
	family?: string;
	given?: string[];
}

interface Meta {
	versionId?: string;
	lastUpdated?: string;
	profile?: string[];
}

interface ContactPoint {
	system?: "phone" | "fax" | "email" | "pager" | "url" | "sms" | "other";
	value?: string;
	use?: "home" | "work" | "temp" | "old" | "mobile";
}

interface Address {
	use?: "home" | "work" | "temp" | "old" | "billing";
	line?: string[];
	city?: string;
	state?: string;
	postalCode?: string;
	country?: string;
}

interface Bundle {
	resourceType: "Bundle";
	id?: string;
	type:
		| "searchset"
		| "collection"
		| "document"
		| "message"
		| "transaction"
		| "transaction-response"
		| "batch"
		| "batch-response"
		| "history";
	total?: number;
	entry?: BundleEntry[];
}

interface BundleEntry {
	fullUrl?: string;
	resource?: any;
	search?: {
		mode?: "match" | "include" | "outcome";
		score?: number;
	};
}

// These classes would be generated by the REST client generator
class PatientClient {
	constructor(private config: any) {}

	async create(patient: Patient) {
		// Implementation would be generated
		return { data: patient, status: 201, headers: {} };
	}

	async read(id: string) {
		// Implementation would be generated
		return {
			data: { resourceType: "Patient", id } as Patient,
			status: 200,
			headers: {},
		};
	}

	async update(id: string, patient: Patient) {
		// Implementation would be generated
		return { data: { ...patient, id }, status: 200, headers: {} };
	}

	async delete(id: string) {
		// Implementation would be generated
		return { data: null, status: 204, headers: {} };
	}

	async search(params?: Record<string, any>) {
		// Implementation would be generated
		return {
			data: {
				resourceType: "Bundle",
				type: "searchset",
				total: 0,
				entry: [],
			} as Bundle,
			status: 200,
			headers: {},
		};
	}
}

class FHIRClient {
	patient: PatientClient;

	constructor(config: any) {
		this.patient = new PatientClient(config);
	}
}

/**
 * Example 1: Basic CRUD operations
 */
async function basicCrudOperations() {
	console.log("üè• Basic CRUD Operations Example");

	// Initialize the FHIR client
	const client = new FHIRClient({
		baseUrl: "https://fhir.example.com/R4",
		auth: {
			token: "your-bearer-token-here",
		},
	});

	try {
		// CREATE: Add a new patient
		console.log("üìù Creating new patient...");
		const newPatient: Patient = {
			resourceType: "Patient",
			active: true,
			name: [
				{
					use: "official",
					family: "Doe",
					given: ["John", "William"],
				},
			],
			gender: "male",
			birthDate: "1990-01-01",
			telecom: [
				{
					system: "email",
					value: "john.doe@example.com",
					use: "home",
				},
			],
		};

		const createResponse = await client.patient.create(newPatient);
		const createdPatient = createResponse.data;
		console.log(`‚úÖ Patient created with ID: ${createdPatient.id}`);

		// READ: Retrieve the patient by ID
		console.log("üìñ Reading patient...");
		const readResponse = await client.patient.read(createdPatient.id!);
		const retrievedPatient = readResponse.data;
		console.log(
			`‚úÖ Retrieved patient: ${retrievedPatient.name?.[0]?.family}, ${retrievedPatient.name?.[0]?.given?.join(" ")}`,
		);

		// UPDATE: Modify the patient
		console.log("‚úèÔ∏è Updating patient...");
		const updatedPatientData: Patient = {
			...retrievedPatient,
			active: false,
			telecom: [
				...(retrievedPatient.telecom || []),
				{
					system: "phone",
					value: "+1-555-123-4567",
					use: "mobile",
				},
			],
		};

		const updateResponse = await client.patient.update(
			createdPatient.id!,
			updatedPatientData,
		);
		const updatedPatient = updateResponse.data;
		console.log(
			`‚úÖ Patient updated - Active: ${updatedPatient.active}, Contact methods: ${updatedPatient.telecom?.length}`,
		);

		// DELETE: Remove the patient (optional - commented out for safety)
		// console.log('üóëÔ∏è Deleting patient...');
		// await client.patient.delete(createdPatient.id!);
		// console.log('‚úÖ Patient deleted');

		return { createdPatient, retrievedPatient, updatedPatient };
	} catch (error) {
		console.error("‚ùå CRUD operation failed:", error);
		throw error;
	}
}

/**
 * Example 2: Search operations with various parameters
 */
async function searchOperations() {
	console.log("üîç Search Operations Example");

	const client = new FHIRClient({
		baseUrl: "https://fhir.example.com/R4",
	});

	try {
		// Search by name
		console.log("üîé Searching by name...");
		const nameSearchResponse = await client.patient.search({
			name: "John Doe",
		});
		console.log(
			`‚úÖ Found ${nameSearchResponse.data.total} patients with name 'John Doe'`,
		);

		// Search by gender and active status
		console.log("üîé Searching by gender and active status...");
		const genderSearchResponse = await client.patient.search({
			gender: "male",
			active: true,
		});
		console.log(
			`‚úÖ Found ${genderSearchResponse.data.total} active male patients`,
		);

		// Search with date range
		console.log("üîé Searching by birth date range...");
		const dateSearchResponse = await client.patient.search({
			birthdate: "ge1990-01-01", // Greater than or equal to 1990-01-01
			birthdate: "le2000-12-31", // Less than or equal to 2000-12-31
		});
		console.log(
			`‚úÖ Found ${dateSearchResponse.data.total} patients born in the 1990s`,
		);

		// Search with pagination
		console.log("üîé Searching with pagination...");
		const paginatedSearchResponse = await client.patient.search({
			_count: 10, // Limit to 10 results
			_offset: 0, // Start from the beginning
		});
		console.log(
			`‚úÖ Retrieved page 1 with ${paginatedSearchResponse.data.entry?.length} patients`,
		);

		// Complex search with multiple parameters
		console.log("üîé Complex search...");
		const complexSearchResponse = await client.patient.search({
			name: "Smith",
			gender: "female",
			active: true,
			_sort: "family", // Sort by family name
			_include: "Patient:organization", // Include referenced organizations
		});
		console.log(
			`‚úÖ Complex search returned ${complexSearchResponse.data.total} results`,
		);

		return {
			nameSearch: nameSearchResponse.data,
			genderSearch: genderSearchResponse.data,
			dateSearch: dateSearchResponse.data,
			paginatedSearch: paginatedSearchResponse.data,
			complexSearch: complexSearchResponse.data,
		};
	} catch (error) {
		console.error("‚ùå Search operation failed:", error);
		throw error;
	}
}

/**
 * Example 3: Error handling and response processing
 */
async function errorHandlingExample() {
	console.log("‚ö†Ô∏è Error Handling Example");

	const client = new FHIRClient({
		baseUrl: "https://fhir.example.com/R4",
		auth: {
			token: "potentially-invalid-token",
		},
	});

	try {
		// Attempt to read a non-existent patient
		console.log("üîç Attempting to read non-existent patient...");

		try {
			const response = await client.patient.read("non-existent-id");
			console.log("‚úÖ Unexpected success:", response.data);
		} catch (error: any) {
			if (error.status === 404) {
				console.log("‚úÖ Correctly handled 404 - Patient not found");
			} else if (error.status === 401) {
				console.log("‚úÖ Correctly handled 401 - Authentication failed");
				console.log("   Consider refreshing your access token");
			} else if (error.status === 403) {
				console.log("‚úÖ Correctly handled 403 - Insufficient permissions");
			} else if (error.status >= 500) {
				console.log("‚úÖ Correctly handled server error:", error.status);
				console.log("   Server appears to be experiencing issues");
			} else {
				console.log("‚úÖ Handled unexpected error:", error.message);
			}
		}

		// Attempt to create invalid patient data
		console.log("üìù Attempting to create invalid patient...");

		try {
			const invalidPatient = {
				resourceType: "Patient",
				// Missing required fields or invalid data
				birthDate: "invalid-date-format",
			} as Patient;

			const response = await client.patient.create(invalidPatient);
			console.log("‚úÖ Unexpected success:", response.data);
		} catch (error: any) {
			if (error.status === 400) {
				console.log("‚úÖ Correctly handled 400 - Bad Request");
				console.log(
					"   Validation errors:",
					error.details?.issue || "Invalid data format",
				);
			} else {
				console.log("‚úÖ Handled validation error:", error.message);
			}
		}

		// Network error simulation
		console.log("üåê Testing network error handling...");

		const offlineClient = new FHIRClient({
			baseUrl: "https://non-existent-server.example.com/fhir",
		});

		try {
			await offlineClient.patient.search({});
		} catch (error: any) {
			console.log("‚úÖ Correctly handled network error");
			console.log("   This could be a network connectivity issue");
		}
	} catch (error) {
		console.error("‚ùå Error handling example failed:", error);
	}
}

/**
 * Example 4: Batch operations and advanced usage
 */
async function batchOperations() {
	console.log("üì¶ Batch Operations Example");

	const client = new FHIRClient({
		baseUrl: "https://fhir.example.com/R4",
	});

	try {
		// Create multiple patients
		console.log("üë• Creating multiple patients...");

		const patients: Patient[] = [
			{
				resourceType: "Patient",
				name: [{ family: "Smith", given: ["Alice"] }],
				gender: "female",
				birthDate: "1985-05-15",
			},
			{
				resourceType: "Patient",
				name: [{ family: "Johnson", given: ["Bob"] }],
				gender: "male",
				birthDate: "1992-08-22",
			},
			{
				resourceType: "Patient",
				name: [{ family: "Williams", given: ["Carol"] }],
				gender: "female",
				birthDate: "1988-12-03",
			},
		];

		const createdPatients = [];
		for (const patient of patients) {
			const response = await client.patient.create(patient);
			createdPatients.push(response.data);
			console.log(
				`‚úÖ Created patient: ${patient.name?.[0]?.given?.[0]} ${patient.name?.[0]?.family}`,
			);
		}

		// Perform bulk search and processing
		console.log("üìä Processing search results...");

		const searchResponse = await client.patient.search({
			_count: 50,
			_sort: "family",
		});

		const bundle = searchResponse.data;
		if (bundle.entry) {
			console.log(
				`‚úÖ Processing ${bundle.entry.length} patients from search results`,
			);

			// Process each patient
			const patientStats = {
				total: bundle.entry.length,
				byGender: { male: 0, female: 0, other: 0 },
				byDecade: {} as Record<string, number>,
			};

			bundle.entry.forEach((entry) => {
				const patient = entry.resource as Patient;

				// Count by gender
				if (patient.gender) {
					patientStats.byGender[
						patient.gender as keyof typeof patientStats.byGender
					]++;
				}

				// Count by birth decade
				if (patient.birthDate) {
					const year = parseInt(patient.birthDate.substring(0, 4));
					const decade = `${Math.floor(year / 10) * 10}s`;
					patientStats.byDecade[decade] =
						(patientStats.byDecade[decade] || 0) + 1;
				}
			});

			console.log("üìà Patient statistics:");
			console.log(`   Total: ${patientStats.total}`);
			console.log(`   By gender:`, patientStats.byGender);
			console.log(`   By birth decade:`, patientStats.byDecade);
		}

		return { createdPatients, searchResults: bundle };
	} catch (error) {
		console.error("‚ùå Batch operations failed:", error);
		throw error;
	}
}

/**
 * Example 5: Configuration and authentication patterns
 */
async function authenticationPatterns() {
	console.log("üîê Authentication Patterns Example");

	try {
		// Bearer token authentication
		console.log("üé´ Bearer token authentication...");
		const bearerClient = new FHIRClient({
			baseUrl: "https://fhir.example.com/R4",
			auth: {
				token: "your-oauth2-bearer-token",
			},
		});

		// Basic authentication
		console.log("üîë Basic authentication...");
		const basicClient = new FHIRClient({
			baseUrl: "https://fhir.example.com/R4",
			auth: {
				username: "your-username",
				password: "your-password",
			},
		});

		// Custom headers
		console.log("üìã Custom headers...");
		const customClient = new FHIRClient({
			baseUrl: "https://fhir.example.com/R4",
			headers: {
				"X-API-Key": "your-api-key",
				"X-Client-Version": "1.0.0",
				"Accept-Language": "en-US",
			},
		});

		// Test connectivity with each client
		const clients = [
			{ name: "Bearer Token", client: bearerClient },
			{ name: "Basic Auth", client: basicClient },
			{ name: "Custom Headers", client: customClient },
		];

		for (const { name, client } of clients) {
			try {
				await client.patient.search({ _count: 1 });
				console.log(`‚úÖ ${name} client configured successfully`);
			} catch (error: any) {
				console.log(`‚ö†Ô∏è ${name} client configuration issue:`, error.message);
			}
		}
	} catch (error) {
		console.error("‚ùå Authentication patterns example failed:", error);
	}
}

/**
 * Run all REST client examples
 */
async function runAllRestClientExamples() {
	console.log("üè• Running all REST Client examples...\n");

	try {
		await basicCrudOperations();
		console.log("\n" + "=".repeat(80) + "\n");

		await searchOperations();
		console.log("\n" + "=".repeat(80) + "\n");

		await errorHandlingExample();
		console.log("\n" + "=".repeat(80) + "\n");

		await batchOperations();
		console.log("\n" + "=".repeat(80) + "\n");

		await authenticationPatterns();

		console.log("\nüéâ All REST client examples completed successfully!");
	} catch (error) {
		console.error("\nüí• REST client example execution failed:", error);
	}
}

// Export examples for use in other modules
export {
	basicCrudOperations,
	searchOperations,
	errorHandlingExample,
	batchOperations,
	authenticationPatterns,
	runAllRestClientExamples,
};

// Run examples if this file is executed directly
if (import.meta.main) {
	runAllRestClientExamples().catch(console.error);
}
